{"ast":null,"code":"import { VERSION } from '@angular/core';\nimport Keyboard from 'simple-keyboard';\nimport { GameService } from './game.service';\nimport { faDeleteLeft } from '@fortawesome/free-solid-svg-icons';\nimport { SettingsComponent } from './settings/settings.component';\nimport { sayHello } from 'src/assets/js/gameboard';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./data.service\";\nimport * as i2 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i3 from \"./game/game.component\";\nimport * as i4 from \"./header/header.component\"; // declare function sayHello(name: string): void;\n\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(dataService, modalService) {\n      this.dataService = dataService;\n      this.modalService = modalService;\n      this.name = 'Angular ' + VERSION.major;\n      this.value = '';\n      this.faDeleteLeft = faDeleteLeft; // Onscreen keyboard events\n\n      this.onChange = input => {\n        this.value = input;\n      };\n\n      this.onKeyPress = button => {\n        /**\r\n         * If you want to handle the shift and caps lock buttons\r\n         */\n        if (button === '{shift}' || button === '{lock}') this.handleShift(); // Pass to game\n\n        this.game.letterEntered(button);\n      };\n\n      this.onInputChange = event => {\n        this.keyboard.setInput(event.target.value);\n      };\n\n      this.handleShift = () => {\n        let currentLayout = this.keyboard.options.layoutName;\n        let shiftToggle = currentLayout === 'default' ? 'shift' : 'default';\n        this.keyboard.setOptions({\n          layoutName: shiftToggle\n        });\n      };\n\n      this.game = new GameService(this.dataService);\n    }\n\n    ngOnInit() {\n      sayHello('mike');\n    }\n\n    openSettings() {\n      const modalRef = this.modalService.open(SettingsComponent);\n      modalRef.componentInstance.gameService = this.game;\n    }\n\n    ngAfterViewInit() {\n      this.keyboard = new Keyboard({\n        onChange: input => this.onChange(input),\n        onKeyPress: button => this.onKeyPress(button),\n        layout: {\n          default: ['Q W E R T Y U I O P', 'A S D F G H J K L', '{enter} Z X C V B N M {bksp}']\n        },\n        display: {\n          '{bksp}': 'bksp',\n          '{enter}': 'enter'\n        }\n      });\n    } // Computer keyboard events\n\n\n    keyEvent(event) {\n      // Pass to game\n      this.game.letterEntered(event.key);\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.NgbModal));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"wordgame-app\"]],\n    hostBindings: function AppComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keyup\", function AppComponent_keyup_HostBindingHandler($event) {\n          return ctx.keyEvent($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 12,\n    vars: 2,\n    consts: [[3, \"parentOpenSettings\"], [2, \"height\", \"calc(100vh - 100px)\", \"width\", \"100vw\"], [1, \"container\", \"d-flex\", \"h-100\"], [1, \"col\", \"d-flex\", \"flex-column\"], [1, \"row\", \"flex-grow-1\", \"justify-content-center\"], [3, \"gameService\"], [1, \"row\", \"justify-content-center\"], [1, \"errormessage\"], [2, \"height\", \"5px\"], [1, \"simple-keyboard\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"app-header\", 0);\n        i0.ɵɵlistener(\"parentOpenSettings\", function AppComponent_Template_app_header_parentOpenSettings_0_listener() {\n          return ctx.openSettings();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 3)(4, \"div\", 4)(5, \"div\");\n        i0.ɵɵelement(6, \"game\", 5);\n        i0.ɵɵelementEnd()();\n        i0.ɵɵelementStart(7, \"div\", 6)(8, \"label\", 7);\n        i0.ɵɵtext(9);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(10, \"div\", 8)(11, \"div\", 9);\n        i0.ɵɵelementEnd()()()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵproperty(\"gameService\", ctx.game);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.game.message);\n      }\n    },\n    dependencies: [i3.GameComponent, i4.HeaderComponent],\n    styles: [\".game[_ngcontent-%COMP%]{display:flex;align-items:center;flex-direction:column}p[_ngcontent-%COMP%]{font-family:Lato}.errormessage[_ngcontent-%COMP%]{display:flex;width:60%;height:10vh;padding:2px 2px 10px;font-size:4vmin;box-sizing:border-box;text-align:center;align-items:center;justify-content:center}.simple-keyboard[_ngcontent-%COMP%]{max-width:850px;align-items:center}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}