{"ast":null,"code":"import { VERSION } from '@angular/core';\nimport Keyboard from 'simple-keyboard';\nimport { GameService } from './game.service';\nimport { faDeleteLeft } from '@fortawesome/free-solid-svg-icons';\nimport { SettingsComponent } from './settings/settings.component';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./data.service\";\nimport * as i2 from \"@ng-bootstrap/ng-bootstrap\";\nimport * as i3 from \"./game/game.component\";\nimport * as i4 from \"./header/header.component\";\nimport * as i5 from \"./footer/footer.component\";\nexport let AppComponent = /*#__PURE__*/(() => {\n  class AppComponent {\n    constructor(dataService, modalService) {\n      this.dataService = dataService;\n      this.modalService = modalService;\n      this.name = 'Angular ' + VERSION.major;\n      this.value = '';\n      this.faDeleteLeft = faDeleteLeft; // Onscreen keyboard events\n\n      this.onChange = input => {\n        this.value = input;\n      };\n\n      this.onKeyPress = button => {\n        /**\r\n         * If you want to handle the shift and caps lock buttons\r\n         */\n        if (button === '{shift}' || button === '{lock}') this.handleShift(); // Pass to game\n\n        this.game.letterEntered(button);\n      };\n\n      this.onInputChange = event => {\n        this.keyboard.setInput(event.target.value);\n      };\n\n      this.handleShift = () => {\n        let currentLayout = this.keyboard.options.layoutName;\n        let shiftToggle = currentLayout === 'default' ? 'shift' : 'default';\n        this.keyboard.setOptions({\n          layoutName: shiftToggle\n        });\n      };\n\n      this.game = new GameService(this.dataService);\n    }\n\n    openSettings() {\n      const modalRef = this.modalService.open(SettingsComponent);\n      modalRef.componentInstance.gameService = this.game;\n    }\n\n    ngAfterViewInit() {\n      this.keyboard = new Keyboard({\n        onChange: input => this.onChange(input),\n        onKeyPress: button => this.onKeyPress(button),\n        layout: {\n          default: ['Q W E R T Y U I O P', 'A S D F G H J K L', '{enter} Z X C V B N M {bksp}']\n        },\n        display: {\n          '{bksp}': 'bksp',\n          '{enter}': 'enter'\n        }\n      });\n    } // Computer keyboard events\n\n\n    keyEvent(event) {\n      // Pass to game\n      this.game.letterEntered(event.key);\n    }\n\n  }\n\n  AppComponent.ɵfac = function AppComponent_Factory(t) {\n    return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.DataService), i0.ɵɵdirectiveInject(i2.NgbModal));\n  };\n\n  AppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: AppComponent,\n    selectors: [[\"wordgame-app\"]],\n    hostBindings: function AppComponent_HostBindings(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵlistener(\"keyup\", function AppComponent_keyup_HostBindingHandler($event) {\n          return ctx.keyEvent($event);\n        }, false, i0.ɵɵresolveWindow);\n      }\n    },\n    decls: 10,\n    vars: 2,\n    consts: [[1, \"fullscreen_panel\"], [3, \"parentOpenSettings\"], [1, \"body\"], [1, \"game-container\"], [3, \"gameService\"], [1, \"bottom-of-screen\"], [1, \"errormessage\"], [1, \"simple-keyboard\"], [1, \"footer\"]],\n    template: function AppComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0)(1, \"app-header\", 1);\n        i0.ɵɵlistener(\"parentOpenSettings\", function AppComponent_Template_app_header_parentOpenSettings_1_listener() {\n          return ctx.openSettings();\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"div\", 2)(3, \"div\", 3);\n        i0.ɵɵelement(4, \"game\", 4);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(5, \"div\", 5)(6, \"label\", 6);\n        i0.ɵɵtext(7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(8, \"div\", 7);\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(9, \"app-footer\", 8);\n        i0.ɵɵelementEnd()();\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(4);\n        i0.ɵɵproperty(\"gameService\", ctx.game);\n        i0.ɵɵadvance(3);\n        i0.ɵɵtextInterpolate(ctx.game.message);\n      }\n    },\n    dependencies: [i3.GameComponent, i4.HeaderComponent, i5.FooterComponent],\n    styles: [\"html[_ngcontent-%COMP%], body[_ngcontent-%COMP%]{margin:0}.fullscreen_panel[_ngcontent-%COMP%]{position:absolute;width:100%;height:100%;display:-moz-flex;-moz-flex-direction:column;-moz-flex-wrap:nowrap;display:-webkit-flex;-webkit-flex-wrap:nowrap;display:-ms-flex;-ms-flex-wrap:nowrap;display:flex;flex-direction:column;flex-wrap:nowrap}header[_ngcontent-%COMP%]{background-color:gray;padding:1em;-ms-flex-shrink:0;flex-shrink:0}.body[_ngcontent-%COMP%]{-moz-flex-grow:1;-ms-flex-grow:1;flex-grow:1;overflow:auto;min-height:2em;background-color:silver;padding:1em}.bottom-of-screen[_ngcontent-%COMP%]{display:flex;flex-direction:column;align-items:center;justify-content:center}.simple-keyboard[_ngcontent-%COMP%]{max-width:850px;border:2px solid blue}.errormessage[_ngcontent-%COMP%]{font-size:4vmin}footer[_ngcontent-%COMP%]{background-color:gray;padding:1em;-ms-flex-shrink:0;flex-shrink:0}.game-container[_ngcontent-%COMP%]{width:100%;height:100%;box-sizing:border-box;border:5px solid green;display:flex;align-items:center;justify-content:center}p[_ngcontent-%COMP%]{font-family:Lato}\"]\n  });\n  return AppComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}